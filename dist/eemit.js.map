{"version":3,"sources":["../src/eemit.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBASe,kBAAU;AACvB,QAAI,cAAJ,CADuB;AAEvB,QAAI,iBAAJ,CAFuB;;AAIvB,QAAM,WAAW,SAAX,QAAW;aAAS,UAAU,OAAO,KAAP,CAAV;KAAT,CAJM;AAKvB,QAAM,aAAa,SAAb,UAAa;aAAS,OAAO,KAAP,KAAiB,UAAjB;KAAT,CALI;;AAOvB,QAAI,WAAW,MAAX,CAAJ,EAAwB;UAIhB;;;AAIJ,iBAJI,KAIJ,GAAqB;gCAJjB,OAIiB;;4CAAN;;WAAM;;uDACnB,0CAAS,KAAT,GADmB;;AAEnB,gBAAK,YAAL,GAAoB,EAApB,CAFmB;;SAArB;;eAJI;QAAc,QAJE;;AActB,cAAQ,MAAM,SAAN,CAdc;AAetB,iBAAW,KAAX,CAfsB;KAAxB,MAgBO,IAAI,SAAS,MAAT,KAAoB,OAAO,MAAP,KAAkB,WAAlB,EAA+B;AAC5D,cAAQ,UAAU,EAAV,CADoD;AAE5D,YAAM,YAAN,GAAqB,EAArB,CAF4D;AAG5D,iBAAW,KAAX,CAH4D;KAAvD,MAIA;AACL,YAAM,IAAI,SAAJ,CAAc,sDAAd,CAAN,CADK;KAJA;;AAeP,UAAM,EAAN,GAAW,SAAS,EAAT,CAAY,IAAZ,EAAkB,QAAlB,EAA4B;AACrC,UAAI,CAAC,QAAD,IAAa,CAAC,WAAW,QAAX,CAAD,EAAuB;AACtC,cAAM,IAAI,SAAJ,CAAc,6BAAd,CAAN,CADsC;OAAxC;;AAIA,WAAK,YAAL,CAAkB,IAAlB,IAA0B,KAAK,YAAL,CAAkB,IAAlB,KAA2B,EAA3B,CALW;AAMrC,WAAK,YAAL,CAAkB,IAAlB,EAAwB,IAAxB,CAA6B,QAA7B,EANqC;;AAQrC,aAAO,IAAP,CARqC;KAA5B,CAtCY;;AAyDvB,UAAM,GAAN,GAAY,SAAS,GAAT,CAAa,IAAb,EAAmB,QAAnB,EAA6B;AACvC,UAAI,QAAJ,EAAc;AACZ,YAAI,CAAC,WAAW,QAAX,CAAD,EAAuB;AACzB,gBAAM,IAAI,SAAJ,CAAc,6BAAd,CAAN,CADyB;SAA3B;AAGA,aAAK,YAAL,CAAkB,IAAlB,EAAwB,MAAxB,CAA+B,KAAK,YAAL,CAAkB,IAAlB,EAAwB,OAAxB,CAAgC,QAAhC,CAA/B,EAA0E,CAA1E,EAJY;OAAd,MAKO;AACL,eAAO,KAAK,YAAL,CAAkB,IAAlB,CAAP,CADK;OALP;;AASA,aAAO,IAAP,CAVuC;KAA7B,CAzDW;;AA6EvB,UAAM,IAAN,GAAa,SAAS,IAAT,CAAc,IAAd,EAAoB,QAApB,EAA8B;AACzC,eAAS,UAAT,GAAsB,IAAtB,CADyC;AAEzC,WAAK,EAAL,CAAQ,IAAR,EAAc,QAAd,EAFyC;;AAIzC,aAAO,IAAP,CAJyC;KAA9B,CA7EU;;AA2FvB,UAAM,OAAN,GAAgB,SAAS,OAAT,CAAiB,IAAjB,EAAgC;;;yCAAN;;OAAM;;AAC9C,UAAM,SAAS,IAAC,CAAK,YAAL,CAAkB,IAAlB,KAA2B,KAAK,YAAL,CAAkB,IAAlB,EAAwB,KAAxB,EAA3B,IAA+D,EAAhE,CAD+B;;AAG9C,aAAO,OAAP,CAAe,oBAAY;AAEzB,YAAI,SAAS,UAAT,EAAqB;AACvB,iBAAK,GAAL,CAAS,IAAT,EAAe,QAAf,EADuB;SAAzB;;AAIA,iBAAS,KAAT,SAAqB,IAArB,EANyB;OAAZ,CAAf,CAH8C;;AAY9C,aAAO,IAAP,CAZ8C;KAAhC,CA3FO;;AA0GvB,WAAO,QAAP,CA1GuB;GAAV","file":"eemit.js","sourcesContent":["/**\n * Eemit Event Emitter\n *\n * @module Eemit\n * @param {object|function} target Target to decorate with event\n *   emitting capabilities. Can be a simple object, an instantiated class or a\n *   constructor function. Optional.\n * @returns {function}\n */\nexport default target => {\n  let eemit;\n  let compound;\n\n  const isObject = value => value === Object(value);\n  const isFunction = value => typeof value === 'function';\n\n  if (isFunction(target)) {\n    /**\n     * Class representing an event emitter.\n     */\n    class Eemit extends target {\n      /**\n       * Create an event emitter.\n       */\n      constructor(...args) {\n        super(...args);\n        this._eemitEvents = {};\n      }\n    }\n\n    eemit = Eemit.prototype;\n    compound = Eemit;\n  } else if (isObject(target) || typeof target === 'undefined') {\n    eemit = target || {};\n    eemit._eemitEvents = {};\n    compound = eemit;\n  } else {\n    throw new TypeError('Eemit can only be composed with objects or functions');\n  }\n\n  /**\n   * Attach event handler\n   *\n   * @param {string} name Name of event\n   * @param {function} callback Event handler to attach\n   * @returns {object|function} Returns itself\n   */\n  eemit.on = function on(name, callback) {\n    if (!callback || !isFunction(callback)) {\n      throw new TypeError('Callback must be a function');\n    }\n\n    this._eemitEvents[name] = this._eemitEvents[name] || [];\n    this._eemitEvents[name].push(callback);\n\n    return this;\n  };\n\n  /**\n   * Detach event handler\n   *\n   * @param {string} name Name of event\n   * @param {function} callback Event handler to remove. When omitted, removed\n   *   all eemit handlers\n   * @returns {object|function} Returns itself\n   */\n  eemit.off = function off(name, callback) {\n    if (callback) {\n      if (!isFunction(callback)) {\n        throw new TypeError('Callback must be a function');\n      }\n      this._eemitEvents[name].splice(this._eemitEvents[name].indexOf(callback), 1);\n    } else {\n      delete this._eemitEvents[name];\n    }\n\n    return this;\n  };\n\n  /**\n   * Attach handler to be fired only once\n   *\n   * @param {string} name Name of event\n   * @param {function} callback\n   * @returns {object|function} Returns itself\n   */\n  eemit.once = function once(name, callback) {\n    callback._eemitOnce = true;\n    this.on(name, callback);\n\n    return this;\n  };\n\n  /**\n   * Trigger events\n   *\n   * @param {string} name Name of event\n   * @param {arguments} args The remainder of arguments\n   * @returns {object|function} Returns itself\n   */\n  eemit.trigger = function trigger(name, ...args) {\n    const cached = (this._eemitEvents[name] && this._eemitEvents[name].slice()) || [];\n\n    cached.forEach(callback => {\n      // Detach handlers marked to run only once.\n      if (callback._eemitOnce) {\n        this.off(name, callback);\n      }\n\n      callback.apply(this, args);\n    });\n\n    return this;\n  };\n\n  return compound;\n};\n"]}